def die(
        animals):
    """
    Return a subset of the feature pointed to by *animals*, containing
    those animals that have a high enough energy level to keep on
    living. The instance referred to by the *animals* identifier passed
    in is not changed.
    """
    # The selection operator is used to select a subset of the animals,
    # based on an attribute value.  The local animals identifier is
    # overwritten to refer to the subset. We could have used any name, or
    # we could have used no name at, returning the result of the selection
    # operation directly.
    animals = animals[energy > 0]
    return animals


def reproduce(
        animals):
    """
    Update the instance pointed to by *animals* to contain additional
    animals.
    """
    # A random selection of objects is taken, which is duplicated. The
    # original energy level of each parent is divided between the parent
    # and the offspring.  Duplicating (a subset of) objects, also copies
    # the attribute values.
    reproducing_animals = select_random(animals, ...)
    reproducing_animals.energy /= 2
    offspring = duplicate(reproducing_animals)
    move(offspring, ...)


def eat_grass(
        sheep,
        grass,
        gain_from_food):
    """
    Those *sheep* objects that are standing on *grass*, eat some, and
    gain *gain_from_food* amount of energy.
    """
    # The selection operator is used to select a subset of sheep, based
    # on a boolean external attribute. Those sheep are selected that are
    # located in grass domain objects that have a grass attribute value
    # of True. In case grass has a 2D attribute value, only those sheep
    # are selected that are located in cells containing a True value.
    # Assign value False to those location in the grass attribute that
    # correspond with the locations of sheep objects to False.
    sheep_on_grass = sheep[grass]
    sheep_on_grass.energy += gain_from_food
    set_value(grass, sheep_on_grass, False)


def eat_sheep(
        wolves,
        sheep,
        search_radius,
        gain_from_food):
    """
    A random selection of *wolves* eat *sheep* that are within the
    *search_radius*, and gain *gain_from_food* amount of energy.
    """
    # Wolves are selected by using a search radius around each wolf. A
    # random selection of these wolves eat one of the nearby sheep.
    wolves_near_sheep = select_by_radius(wolves, sheep, search_radius)
    wolves_catching_sheep = select_random(wolves_near_sheep, ...)
    caught_sheep = select_by_radius(sheep, wolves_catching_sheep,
        search_radius, 1)
    delete(caught_sheep)
    wolves_catching_sheep.energy += gain_from_food


def grow_grass(
        area,
        grass_regrowth_time):
    """
    Grow grass within *area* using a *grass_regrowth_time*.
    """
    if not area.grass:
        if area.countdown <= 0:
            area.grass = True
            area.countdown = grass_regrowth_time
        else:
            area.countdown -= 1


# Read the initial area feature (polygon).
# Area has grass and countdown attributes.
# - grass is a polygon feature with a 2D array per polygon. This array
#   contains boolean cells. A True cell represents a cell containing grass.
# - countdown is a value representing time until the grass is gone.
#
area = ...

# Read the initial animal features (points).
# Sheep and wolves have an energy attribute.
# sheep is a point feature with an energy attribute per point.
sheep = ...
wolves = ...

# Wolves select sheep from area within this radius.
search_radius = ...

# Sheep and wolves gain energy from eating.
sheep_gain_from_food = ...
wolf_gain_from_food = ...

grass_regrowth_time = ...


move(sheep, ...)
sheep.energy -= 1
eat_grass(sheep, area.grass, sheep_gain_from_food)
sheep = die(sheep)
reproduce(sheep)

move(wolves, ...)
wolves.energy -= 1
eat_sheep(wolves, sheep, search_radius, wolf_gain_from_food)
wolves = die(wolves)
reproduce(wolves)

grow_grass(area, grass_regrowth_time)

# vim:syntax=python
