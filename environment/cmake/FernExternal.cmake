IF(DEFINED ENV{FERN_EXTERNAL_PROJECT_PREFIX})
    # Configure search path to find packages.
    SET(CMAKE_PREFIX_PATH
        $ENV{FERN_EXTERNAL_PROJECT_PREFIX}
        ${CMAKE_PREFIX_PATH}
    )
ENDIF()

IF(DEFINED ENV{PEACOCK_PREFIX})
    SET(PEACOCK_PREFIX $ENV{PEACOCK_PREFIX})
ENDIF()


# Configure and find packages, configure project. ------------------------------
IF(FERN_BOOST_REQUIRED)
    SET(Boost_USE_STATIC_LIBS OFF)
    SET(Boost_USE_STATIC_RUNTIME OFF)
    ADD_DEFINITIONS(
        # Use dynamic libraries.
        -DBOOST_ALL_DYN_LINK
        # Prevent auto-linking.
        -DBOOST_ALL_NO_LIB

        # # No deprecated features.
        # -DBOOST_FILESYSTEM_NO_DEPRECATED

        # -DBOOST_CHRONO_DONT_PROVIDE_HYBRID_ERROR_HANDLING
        # -DBOOST_CHRONO_HEADER_ONLY
    )
    SET(CMAKE_CXX_FLAGS_RELEASE
        # Disable range checks in release builds.
        "${CMAKE_CXX_FLAGS_RELEASE} -DBOOST_DISABLE_ASSERTS"
    )
    IF(DEFINED ENV{PEACOCK_PREFIX})
        FOREACH(version 1.56.0 1.55.0)
            SET(BOOST_PREFIX
                ${PEACOCK_PREFIX}/${peacock_target_platform}/boost-${version})
            IF(EXISTS ${BOOST_PREFIX})
                SET(CMAKE_PREFIX_PATH ${BOOST_PREFIX} ${CMAKE_PREFIX_PATH})
                BREAK()
            ENDIF()
        ENDFOREACH()
    ENDIF()
    FIND_PACKAGE(Boost REQUIRED
        COMPONENTS ${FERN_REQUIRED_BOOST_COMPONENTS})
    INCLUDE_DIRECTORIES(
        SYSTEM
        ${Boost_INCLUDE_DIRS}
    )
    LIST(APPEND FERN_EXTERNAL_LIBRARIES
        ${Boost_FILESYSTEM_LIBRARY}
        ${Boost_PROGRAM_OPTIONS_LIBRARY}
        ${Boost_SYSTEM_LIBRARY}
    )
ENDIF()
### IF(FERN_CYTHON_REQUIRED)
###     FIND_PACKAGE(Cython REQUIRED)
###     INCLUDE(UseCython)
### ENDIF()
FIND_PACKAGE(Doxygen)
IF(FERN_EXPAT_REQUIRED)
    FIND_PACKAGE(EXPAT REQUIRED)
    INCLUDE_DIRECTORIES(
        SYSTEM
        ${EXPAT_INCLUDE_DIRS}
    )
ENDIF()
IF(FERN_GDAL_REQUIRED)
    FIND_PACKAGE(GDAL REQUIRED)
    INCLUDE_DIRECTORIES(
        SYSTEM
        ${GDAL_INCLUDE_DIRS}
    )
    LIST(APPEND FERN_EXTERNAL_LIBRARIES
        ${GDAL_LIBRARIES}
    )
ENDIF()
IF(FERN_HDF5_REQUIRED)
    SET(HDF5_USE_STATIC_LIBRARIES OFF)
    FIND_PACKAGE(HDF5 REQUIRED
        COMPONENTS C CXX HL)
    INCLUDE_DIRECTORIES(
        SYSTEM
        ${HDF5_INCLUDE_DIRS}
        ${HDF5_INCLUDE_DIRS}/cpp
    )
    LIST(APPEND FERN_EXTERNAL_LIBRARIES
        ${HDF5_LIBRARIES}
    )
ENDIF()
IF(FERN_LOKI_REQUIRED)
    FIND_PACKAGE(Loki REQUIRED)
ENDIF()
IF(FERN_NETCDF_REQUIRED)
    FIND_PACKAGE(NetCDF REQUIRED)
ENDIF()
IF(FERN_NUMPY_REQUIRED)
    FIND_PACKAGE(NumPy REQUIRED)
    INCLUDE_DIRECTORIES(
        SYSTEM
        ${NUMPY_INCLUDE_DIRS}
    )
    # http://docs.scipy.org/doc/numpy-dev/reference/c-api.deprecations.html
    ADD_DEFINITIONS(-DNPY_NO_DEPRECATED_API=NPY_1_7_API_VERSION)
ENDIF()
IF(FERN_PYTHON_LIBS_REQUIRED)
    SET(Python_ADDITIONAL_VERSIONS "2.7")
    FIND_PACKAGE(PythonLibs REQUIRED)
    INCLUDE_DIRECTORIES(
        SYSTEM
        ${PYTHON_INCLUDE_DIRS}
    )
    LIST(APPEND FERN_EXTERNAL_LIBRARIES
        ${PYTHON_LIBRARIES}
    )
ENDIF()
IF(FERN_READLINE_REQUIRED)
    FIND_PACKAGE(Readline REQUIRED)
    INCLUDE_DIRECTORIES(
        SYSTEM
        ${READLINE_INCLUDE_DIR}
    )
ENDIF()
IF(FERN_SWIG_REQUIRED)
    FIND_PACKAGE(SWIG REQUIRED)
ENDIF()
IF(FERN_XSD_REQUIRED)
    FIND_PACKAGE(XSD REQUIRED)
    INCLUDE_DIRECTORIES(
        SYSTEM
        ${XSD_INCLUDE_DIRS}
    )
ENDIF()
