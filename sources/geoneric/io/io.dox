/*! \page io I/O

I/O has the task of reading and writing features and their attributes from
and to datasets. Datasets are formatted in different ways.

The client determines what must be read. Often the client wants to
read or write a selection of an attribute's values. I/O drivers provide
methods to read and write sections of an attribute's values. They have
an argument telling the implementation what to read or write.

Since all attributes are spatio-temporal, the API for all format drivers
is the same. For example, it doesn't matter if a format doesn't support
storing spatially varying attribute values. If a client asks for the
values in a certain spatial extent, the driver can just return a single
value.

The time points of the temporal domain can be iterated over. One could also
iterate over the coordinates of the spatial domain, but let's wait for a
good use-case.

A feature is (almost) always associated with a dataset that it uses to read
and write values to. This abstract dataset base class needs to be in a low
level library that defines the feature, domain and value classes. The format
io libraries implement the dataset class for each format. TODO I prefer to
have the io libraries completely decouples from the feature, domain, value
stuff. Is that possible?

\section io_read Reading feature values

\code
// A dataset contains one or more features, formatted in a certain way.
dataset = open_dataset(dataset_name);

// A feature layers and observes a dataset. It shares the dataset with other
// features.
feature = dataset->feature(feature_name, READ);

// Address contains a time point.
address = ...

// Value can contain a 0D, 1D, 2D or 3D value.
value = feature->value(address);
\endcode

It is not guaranteed that reading a value at a certain address twice returns
the same value. In case of an uncertain value, a distribution of values is
stored, in which case reading a value involves drawing a value from the
distribution.

\section io_write Writing feature values

TODO

*/

// vim:syntax=cpp
